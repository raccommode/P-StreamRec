import os
import re
from pathlib import Path
from typing import Optional
from urllib.parse import urlparse

from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

from .ffmpeg_runner import FFmpegManager

# Environment
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_DIR = BASE_DIR / "static"
OUTPUT_DIR = Path(os.getenv("OUTPUT_DIR", str(BASE_DIR / "data")))
FFMPEG_PATH = os.getenv("FFMPEG_PATH", "ffmpeg")
HLS_TIME = int(os.getenv("HLS_TIME", "4"))
HLS_LIST_SIZE = int(os.getenv("HLS_LIST_SIZE", "6"))
CB_RESOLVER_ENABLED = os.getenv("CB_RESOLVER_ENABLED", "false").lower() in {"1", "true", "yes"}

# Ensure dirs
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

app = FastAPI(title="P-StreamRec", version="0.1.0")

# Configuration CORS permissive pour Umbrel
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Autoriser toutes les origines
    allow_credentials=False,  # Pas de credentials avec wildcard origin
    allow_methods=["*"],  # Autoriser toutes les m√©thodes (GET, POST, etc.)
    allow_headers=["*"],  # Autoriser tous les headers
)

# Static mounts
app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")
app.mount("/streams", StaticFiles(directory=str(OUTPUT_DIR)), name="streams")

manager = FFmpegManager(str(OUTPUT_DIR), ffmpeg_path=FFMPEG_PATH, hls_time=HLS_TIME, hls_list_size=HLS_LIST_SIZE)


class StartBody(BaseModel):
    target: str  # Either an m3u8 URL or a username (if resolver enabled)
    source_type: Optional[str] = None  # "m3u8" or "chaturbate" or None for auto
    name: Optional[str] = None  # display name
    person: Optional[str] = None  # recording bucket (per person)


def slugify(value: str) -> str:
    value = value.strip().lower()
    value = re.sub(r"[^a-z0-9_-]+", "-", value)
    value = re.sub(r"-+", "-", value).strip("-")
    return value or "session"


@app.get("/")
async def index():
    return FileResponse(str(STATIC_DIR / "index.html"))


@app.get("/model.html")
async def model_page():
    return FileResponse(str(STATIC_DIR / "model.html"))


@app.post("/api/start")
async def api_start(body: StartBody):
    print(f"\n{'='*60}")
    print(f"üéØ REQU√äTE /api/start")
    print(f"{'='*60}")
    print(f"üì• Body: {body}")
    
    target = (body.target or "").strip()
    if not target:
        print(f"‚ùå Champ 'target' vide")
        raise HTTPException(status_code=400, detail="Champ 'target' requis")

    print(f"üéØ Target: {target}")
    print(f"üîñ Source type: {body.source_type}")
    print(f"üë§ Person: {body.person}")
    print(f"üìõ Name: {body.name}")

    m3u8_url: Optional[str] = None
    person: Optional[str] = (body.person or "").strip() or None

    # Determine source type
    stype = (body.source_type or "").lower().strip()
    print(f"üìå Source type d√©termin√©: {stype or 'auto'}")

    if stype == "m3u8" or target.startswith("http://") or target.startswith("https://"):
        print(f"‚úÖ URL M3U8 directe d√©tect√©e")
        m3u8_url = target
    else:
        print(f"üîç R√©solution Chaturbate requise...")
        # Try chaturbate if allowed or explicit
        if stype in ("", "chaturbate"):
            if not CB_RESOLVER_ENABLED:
                print(f"‚ùå CB_RESOLVER_ENABLED est d√©sactiv√©")
                raise HTTPException(status_code=400, detail="R√©solution Chaturbate d√©sactiv√©e. Fournissez une URL m3u8 directe ou activez CB_RESOLVER_ENABLED.")
            try:
                print(f"üîÑ Appel du resolver Chaturbate...")
                from .resolvers.chaturbate import resolve_m3u8 as resolve_chaturbate
                m3u8_url = resolve_chaturbate(target)
                if not m3u8_url:
                    print(f"‚ùå Resolver a retourn√© None")
                    raise HTTPException(status_code=400, detail=f"Impossible de trouver le flux pour {target}")
                print(f"‚úÖ M3U8 r√©solu: {m3u8_url}")
                if not person:
                    person = target  # username
                    print(f"üë§ Person d√©fini: {person}")
            except HTTPException:
                raise
            except Exception as e:
                import traceback
                error_detail = f"√âchec r√©solution Chaturbate pour {target}: {str(e)}"
                print(f"‚ùå ERROR: {error_detail}")
                print(traceback.format_exc())
                raise HTTPException(status_code=400, detail=error_detail)
        else:
            print(f"‚ùå Source type invalide: {stype}")
            raise HTTPException(status_code=400, detail="source_type invalide. Utilisez 'm3u8' ou 'chaturbate'.")

    # If person still not set (direct m3u8), infer from URL
    if not person:
        try:
            pu = urlparse(m3u8_url)
            # try last non-empty path part without extension
            parts = [p for p in pu.path.split('/') if p]
            base = parts[-2] if len(parts) >= 2 else (parts[-1] if parts else pu.hostname or "session")
            base = base.split('.')[0]
            person = base or (pu.hostname or "session")
        except Exception:
            person = "session"

    person = slugify(person)
    print(f"üîñ Person slugifi√©: {person}")
    print(f"\nüöÄ D√©marrage de la session FFmpeg...")

    try:
        sess = manager.start_session(m3u8_url, person=person, display_name=body.name)
        print(f"‚úÖ Session cr√©√©e avec succ√®s: {sess.id}")
    except RuntimeError as e:
        print(f"‚ùå RuntimeError: {e}")
        raise HTTPException(status_code=409, detail=str(e))
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}")

    print(f"{'='*60}")
    print(f"‚úÖ SUCC√àS - Session {sess.id} d√©marr√©e")
    print(f"{'='*60}\n")

    return {
        "id": sess.id,
        "person": person,
        "name": sess.name,
        "playback_url": sess.playback_url,
        "record_path": sess.record_path_today(),
        "created_at": sess.created_at,
        "running": True,
    }


@app.get("/api/status")
async def api_status():
    return manager.list_status()


@app.post("/api/stop/{session_id}")
async def api_stop(session_id: str):
    ok = manager.stop_session(session_id)
    if not ok:
        raise HTTPException(status_code=404, detail="Session introuvable")
    return {"stopped": True, "id": session_id}


@app.get("/api/model/{username}/status")
async def get_model_status(username: str):
    """R√©cup√®re le statut et les infos d'un mod√®le Chaturbate"""
    if not CB_RESOLVER_ENABLED:
        raise HTTPException(status_code=400, detail="R√©solution Chaturbate d√©sactiv√©e")
    
    try:
        import requests
        url = f"https://chaturbate.com/api/chatvideocontext/{username}/"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Accept": "application/json",
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            # Utiliser le proxy local pour les miniatures
            thumbnail = f"/api/thumbnail/{username}"
            
            return {
                "username": username,
                "isOnline": data.get("room_status") == "public" or bool(data.get("hls_source")),
                "thumbnail": thumbnail,
                "viewers": data.get("num_users", 0)
            }
        else:
            # Fallback si l'API ne r√©pond pas
            return {
                "username": username,
                "isOnline": False,
                "thumbnail": f"/api/thumbnail/{username}",
                "viewers": 0
            }
    except Exception as e:
        # En cas d'erreur, retourner offline
        return {
            "username": username,
            "isOnline": False,
            "thumbnail": f"/api/thumbnail/{username}",
            "viewers": 0
        }


@app.get("/api/thumbnail/{username}")
async def get_thumbnail(username: str):
    """Proxy pour r√©cup√©rer les miniatures Chaturbate"""
    import requests
    from fastapi.responses import Response
    
    try:
        # Essayer plusieurs URLs de miniatures Chaturbate
        img_urls = [
            f"https://roomimg.stream.highwebmedia.com/ri/{username}.jpg",
            f"https://cbjpeg.stream.highwebmedia.com/stream?room={username}&f=.jpg",
        ]
        
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Referer": "https://chaturbate.com/",
        }
        
        # Essayer chaque URL
        for img_url in img_urls:
            try:
                response = requests.get(img_url, headers=headers, timeout=5, allow_redirects=True)
                
                if response.status_code == 200 and len(response.content) > 1000:  # Image valide
                    return Response(
                        content=response.content,
                        media_type="image/jpeg",
                        headers={
                            "Cache-Control": "public, max-age=300",
                        }
                    )
            except:
                continue
        
        # Si aucune image trouv√©e, retourner SVG gradient moderne
        svg_placeholder = f'''<svg xmlns="http://www.w3.org/2000/svg" width="280" height="200">
            <defs>
                <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#6366f1;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#a855f7;stop-opacity:1" />
                </linearGradient>
            </defs>
            <rect fill="url(#grad)" width="280" height="200"/>
            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="system-ui" font-size="18" font-weight="600">{username}</text>
            <text x="50%" y="70%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="system-ui" font-size="12" opacity="0.8">üì∑ Miniature indisponible</text>
        </svg>'''
        
        return Response(
            content=svg_placeholder,
            media_type="image/svg+xml",
            headers={"Cache-Control": "public, max-age=60"}
        )
            
    except Exception as e:
        # SVG placeholder en cas d'erreur
        svg_placeholder = f'''<svg xmlns="http://www.w3.org/2000/svg" width="280" height="200">
            <rect fill="#1a1f3a" width="280" height="200"/>
            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="#a0aec0" font-family="system-ui" font-size="16">{username}</text>
        </svg>'''
        
        return Response(
            content=svg_placeholder,
            media_type="image/svg+xml",
            headers={"Cache-Control": "public, max-age=60"}
        )
